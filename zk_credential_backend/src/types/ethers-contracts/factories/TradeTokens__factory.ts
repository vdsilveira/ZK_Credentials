/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { TradeTokens, TradeTokensInterface } from "../TradeTokens";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_IREC_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "OfferId",
        type: "string",
      },
      {
        internalType: "uint256[]",
        name: "_tokenIdsSold",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_tokenQuantities",
        type: "uint256[]",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Open_Offer_Irec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "OfferId",
        type: "string",
      },
    ],
    name: "buyIrec",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "Offer",
        type: "string",
      },
    ],
    name: "getOFFEr",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "seller",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "tokenIdsSold",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "tokenQuantities",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "Finished",
            type: "bool",
          },
        ],
        internalType: "struct Offer_IREC",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class TradeTokens__factory {
  static readonly abi = _abi;
  static createInterface(): TradeTokensInterface {
    return new Interface(_abi) as TradeTokensInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TradeTokens {
    return new Contract(address, _abi, runner) as unknown as TradeTokens;
  }
}
